1. メモリの効率が悪い
ハッシュテーブルは、キーとバリューの両方を格納する必要があるし、衝突を避けるためにテーブルを大きく確保しないといけない。
一方木構造では衝突がないため、データ量に応じて動的にメモリを割り当てる。

2. 二分探索木などではキーの順序を保持している
二分探索木では、キーの大小関係に基づいて要素が配置されるため、データを簡単に順序付きで取得できる。
一方ハッシュテーブルでは大小関係は記憶されていないので、別途ソートが必要になる。

3. 最悪時計算量がハッシュテーブルの方が悪い
完全二分探索木は、最悪でもO(log n)
ハッシュテーブルは、最悪O(n)

→ 意図的に衝突するような入力があったら、大変なことに！ハッシュテーブルは外部からの攻撃に弱い・・・
（特にデータベースでは使われない）